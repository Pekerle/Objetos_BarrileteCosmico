import barrileteCosmico.*
import localidad.*
import medioDeTransporte.*
import usuario.*
import viaje.*

describe "Caso tipico"{
	
	test "Los destinos mas importantes de Barrilete Cósmico son Garlic's Sea y Last Toninas" {
		assert.equals(#{garlicsSea,lastToninas}, barrileteCosmico.destinosImportantes())
	}
	test "Silver's Sea es un destino peligroso (no lo es)"{
		assert.notThat(silversSea.esDestinoPeligroso())
	}
	test "Barrilete Cósmico es empresa extrema"{
		assert.that(barrileteCosmico.esEmpresaExtrema())
	}
	test "Conocer la carta de destinos de Barrilete Cósmico"{
		assert.equals(#{garlicsSea,silversSea,lastToninas,goodAirs}, barrileteCosmico.conocerCarta())
	}
	test "Obtener las millas de PHari (500km)"{
		assert.equals(500, pabloHari.obtenerKM())
	}
}


describe "Aplicar un 25% de Last Toninas"{
	
	fixture{
		lastToninas.aplicarDescuento(25)
	}
	test "Aplicar 25% a las toninas da 2625"{
		assert.equals(2625, lastToninas.costoDestino())
	}
	test "Aplicar 25% a las toninas, y esta tiene el Certificado de Descuento como equipaje imprescindible"{
		assert.that(lastToninas.equipaje().contains("Certificado de descuento"))
	}
}

describe "Aplicar un 15% a todos los destinos"{
	
	fixture{
		barrileteCosmico.aplicarDescuento(15)
	}
	test"Garlic's Sea cuesta 2125"{
		assert.equals(2125, garlicsSea.costoDestino())
	}
	test"Silver's Sea cuesta 1147.5"{
		assert.equals(1147.5, silversSea.costoDestino())
	}
	test"Last Toninas cuesta 2975"{
		assert.equals(2975, lastToninas.costoDestino())
	}
	test"Good Airs cuesta 1275"{
		assert.equals(1275, goodAirs.costoDestino())
	}
	test"Todos tienen el certificado"{
		assert.that(barrileteCosmico.conocerCarta().all({unDestino=>unDestino.equipaje().contains("Certificado de descuento")}))
	}
}

describe "PHari puede volar a Silver's Sea"{
	
	fixture{
		barrileteCosmico.prepararViaje(pabloHari, silversSea)
	}
	test "Silver's Sea es agregado en su historial"{
		assert.that(pabloHari.viajes().contains(silversSea))
	}
	test "PHari tiene en su cuenta $150"{
		assert.equals(150, pabloHari.dinero())
	}
}

describe "garlicsSea está en el KM 10, silversSea está en el KM 20 y PHari quiere viajar a Silver's Sea"{
	
	fixture{
		garlicsSea.ubicacionKM(10)
		silversSea.ubicacionKM(20)
		barrileteCosmico.prepararViaje(pabloHari, silversSea)
	}
		
	test "La distancia entre garlicsSea y silversSeas es 10" {
		assert.equals(10, viajeGenerico.distanciaALocalidad())
	}
	test "El costo del transporte para viajar desde garlicsSea a silverSeas en avion (con UNA turbina con impulso adicional 10) es de 100" {
		assert.equals(100, viajeGenerico.costoTransporte())
	}
	test "El costo total para viajar desde garlicsSea a silverSeas en avion es $1450" {
		assert.equals(1450, viajeGenerico.costo())
	}
	test "PHari viaja a silversSeas y le queda $50" {
		assert.equals(50, pabloHari.dinero())
	}
	test "La nueva localidad de origen de PHari es silversSea" {
		assert.equals(silversSea, pabloHari.localidadOrigen())
	}
}

describe "Prueba de nuevos tipos de localidades"{
	
	test "La playa saintClement no es peligrosa porque las playas nunca son peligrosas"{
		assert.notThat(saintClement.esDestinoPeligroso())
	}
	test "La montaña nono no es peligrosa porque tiene menos de 5000 metros pero requiere vacuna"{
		assert.that(nono.esDestinoPeligroso())
	}
	test "La ciudad historica lujan nunca es peligrosa porque siempre se requiere que se lleve un seguro al viajero"{
		assert.notThat(lujan.esDestinoPeligroso())
	}
	test "La ciudad historica lujan es destino destacado porque tiene más de 3 museos"{
		assert.that(lujan.esDestinoImportante())
	}
}

describe "Prueba de nuevos medios de transporte"{
	test "El costoKM de 1KM en avion con un impulso de turbina de 10 es 10"{
		assert.equals(10,avion.costoKM())
	}
	test "El costoKM de 1KM en Micro es $5000"{
		assert.equals(5000,micro.costoKM())
	}
	test "El costoKM de 1KM en tren es $1429"{
		assert.equals(1429,tren.costoKM())
	}
	test "El costoKM de 1KM en barco con una probabilidad de choque de 2, es $2000"{
		assert.equals(2000,barco.costoKM())
	}
}
describe "Prueba de preferencias de transporte"{
	test "pabloHari con $1500, teniendo una preferencia estudiantil, elige avión"{
		assert.equals(avion,barrileteCosmico.elegirMedioTransporte(pabloHari))
	}
	test "ArmandoBarreda con $15000, teniendo una preferencia empresarial, elige barco"{
		assert.equals(barco,barrileteCosmico.elegirMedioTransporte(armandoBarreda))
	}
}
	